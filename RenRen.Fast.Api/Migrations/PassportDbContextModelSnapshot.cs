// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RenRen.Fast.Api.Entity;

namespace RenRen.Fast.Api.Migrations
{
    [DbContext(typeof(PassportDbContext))]
    partial class PassportDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RenRen.Fast.Api.Entity.Msg.MsgSms", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("nvarchar(80)")
                        .HasComment("短信内容")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnName("expired_time")
                        .HasColumnType("datetime2")
                        .HasComment("过期时间");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnName("mobile")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<int>("MsgType")
                        .HasColumnName("msg_type")
                        .HasColumnType("int")
                        .HasComment("短信类型：注册 = 0");

                    b.Property<DateTime>("SendTime")
                        .HasColumnName("send_time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("msg_sms");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzBlobTriggers", b =>
                {
                    b.Property<byte[]>("BlobData")
                        .HasColumnName("BLOB_DATA")
                        .HasColumnType("image");

                    b.Property<string>("SchedName")
                        .IsRequired()
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("TriggerGroup")
                        .IsRequired()
                        .HasColumnName("TRIGGER_GROUP")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasColumnName("TRIGGER_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.ToTable("QRTZ_BLOB_TRIGGERS");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzCalendars", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("CalendarName")
                        .HasColumnName("CALENDAR_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<byte[]>("Calendar")
                        .IsRequired()
                        .HasColumnName("CALENDAR")
                        .HasColumnType("image");

                    b.HasKey("SchedName", "CalendarName");

                    b.ToTable("QRTZ_CALENDARS");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzCronTriggers", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("TriggerName")
                        .HasColumnName("TRIGGER_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TriggerGroup")
                        .HasColumnName("TRIGGER_GROUP")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasColumnName("CRON_EXPRESSION")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("TimeZoneId")
                        .HasColumnName("TIME_ZONE_ID")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_CRON_TRIGGERS");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzFiredTriggers", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("EntryId")
                        .HasColumnName("ENTRY_ID")
                        .HasColumnType("nvarchar(95)")
                        .HasMaxLength(95);

                    b.Property<long>("FiredTime")
                        .HasColumnName("FIRED_TIME")
                        .HasColumnType("bigint");

                    b.Property<string>("InstanceName")
                        .IsRequired()
                        .HasColumnName("INSTANCE_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("IsNonconcurrent")
                        .HasColumnName("IS_NONCONCURRENT")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("JobGroup")
                        .HasColumnName("JOB_GROUP")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("JobName")
                        .HasColumnName("JOB_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Priority")
                        .HasColumnName("PRIORITY")
                        .HasColumnType("int");

                    b.Property<string>("RequestsRecovery")
                        .HasColumnName("REQUESTS_RECOVERY")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<long>("SchedTime")
                        .HasColumnName("SCHED_TIME")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("STATE")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("TriggerGroup")
                        .IsRequired()
                        .HasColumnName("TRIGGER_GROUP")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasColumnName("TRIGGER_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("SchedName", "EntryId");

                    b.ToTable("QRTZ_FIRED_TRIGGERS");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzJobDetails", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("JobName")
                        .HasColumnName("JOB_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("JobGroup")
                        .HasColumnName("JOB_GROUP")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("IsDurable")
                        .IsRequired()
                        .HasColumnName("IS_DURABLE")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IsNonconcurrent")
                        .IsRequired()
                        .HasColumnName("IS_NONCONCURRENT")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IsUpdateData")
                        .IsRequired()
                        .HasColumnName("IS_UPDATE_DATA")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("JobClassName")
                        .IsRequired()
                        .HasColumnName("JOB_CLASS_NAME")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<byte[]>("JobData")
                        .HasColumnName("JOB_DATA")
                        .HasColumnType("image");

                    b.Property<string>("RequestsRecovery")
                        .IsRequired()
                        .HasColumnName("REQUESTS_RECOVERY")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.HasKey("SchedName", "JobName", "JobGroup");

                    b.ToTable("QRTZ_JOB_DETAILS");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzLocks", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("LockName")
                        .HasColumnName("LOCK_NAME")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("SchedName", "LockName");

                    b.ToTable("QRTZ_LOCKS");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzPausedTriggerGrps", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("TriggerGroup")
                        .HasColumnName("TRIGGER_GROUP")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("SchedName", "TriggerGroup");

                    b.ToTable("QRTZ_PAUSED_TRIGGER_GRPS");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzSchedulerState", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("InstanceName")
                        .HasColumnName("INSTANCE_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long>("CheckinInterval")
                        .HasColumnName("CHECKIN_INTERVAL")
                        .HasColumnType("bigint");

                    b.Property<long>("LastCheckinTime")
                        .HasColumnName("LAST_CHECKIN_TIME")
                        .HasColumnType("bigint");

                    b.HasKey("SchedName", "InstanceName");

                    b.ToTable("QRTZ_SCHEDULER_STATE");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzSimpleTriggers", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("TriggerName")
                        .HasColumnName("TRIGGER_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TriggerGroup")
                        .HasColumnName("TRIGGER_GROUP")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long>("RepeatCount")
                        .HasColumnName("REPEAT_COUNT")
                        .HasColumnType("bigint");

                    b.Property<long>("RepeatInterval")
                        .HasColumnName("REPEAT_INTERVAL")
                        .HasColumnType("bigint");

                    b.Property<long>("TimesTriggered")
                        .HasColumnName("TIMES_TRIGGERED")
                        .HasColumnType("bigint");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_SIMPLE_TRIGGERS");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzSimpropTriggers", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("TriggerName")
                        .HasColumnName("TRIGGER_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TriggerGroup")
                        .HasColumnName("TRIGGER_GROUP")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("BoolProp1")
                        .HasColumnName("BOOL_PROP_1")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("BoolProp2")
                        .HasColumnName("BOOL_PROP_2")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("DecProp1")
                        .HasColumnName("DEC_PROP_1")
                        .HasColumnType("numeric(13, 4)");

                    b.Property<decimal?>("DecProp2")
                        .HasColumnName("DEC_PROP_2")
                        .HasColumnType("numeric(13, 4)");

                    b.Property<int?>("IntProp1")
                        .HasColumnName("INT_PROP_1")
                        .HasColumnType("int");

                    b.Property<int?>("IntProp2")
                        .HasColumnName("INT_PROP_2")
                        .HasColumnType("int");

                    b.Property<long?>("LongProp1")
                        .HasColumnName("LONG_PROP_1")
                        .HasColumnType("bigint");

                    b.Property<long?>("LongProp2")
                        .HasColumnName("LONG_PROP_2")
                        .HasColumnType("bigint");

                    b.Property<string>("StrProp1")
                        .HasColumnName("STR_PROP_1")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("StrProp2")
                        .HasColumnName("STR_PROP_2")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<string>("StrProp3")
                        .HasColumnName("STR_PROP_3")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_SIMPROP_TRIGGERS");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzTriggers", b =>
                {
                    b.Property<string>("SchedName")
                        .HasColumnName("SCHED_NAME")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("TriggerName")
                        .HasColumnName("TRIGGER_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TriggerGroup")
                        .HasColumnName("TRIGGER_GROUP")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("CalendarName")
                        .HasColumnName("CALENDAR_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("EndTime")
                        .HasColumnName("END_TIME")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("JobData")
                        .HasColumnName("JOB_DATA")
                        .HasColumnType("image");

                    b.Property<string>("JobGroup")
                        .IsRequired()
                        .HasColumnName("JOB_GROUP")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnName("JOB_NAME")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<short?>("MisfireInstr")
                        .HasColumnName("MISFIRE_INSTR")
                        .HasColumnType("smallint");

                    b.Property<long?>("NextFireTime")
                        .HasColumnName("NEXT_FIRE_TIME")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrevFireTime")
                        .HasColumnName("PREV_FIRE_TIME")
                        .HasColumnType("bigint");

                    b.Property<int?>("Priority")
                        .HasColumnName("PRIORITY")
                        .HasColumnType("int");

                    b.Property<long>("StartTime")
                        .HasColumnName("START_TIME")
                        .HasColumnType("bigint");

                    b.Property<string>("TriggerState")
                        .IsRequired()
                        .HasColumnName("TRIGGER_STATE")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnName("TRIGGER_TYPE")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.HasIndex("SchedName", "JobName", "JobGroup");

                    b.ToTable("QRTZ_TRIGGERS");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.ScheduleJob", b =>
                {
                    b.Property<long>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("job_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BeanName")
                        .HasColumnName("bean_name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("datetime");

                    b.Property<string>("CronExpression")
                        .HasColumnName("cron_expression")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Params")
                        .HasColumnName("params")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint");

                    b.HasKey("JobId")
                        .HasName("PK__schedule__6E32B6A5AEDFE09F");

                    b.ToTable("schedule_job");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.ScheduleJobLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("log_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BeanName")
                        .HasColumnName("bean_name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("datetime");

                    b.Property<string>("Error")
                        .HasColumnName("error")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<long>("JobId")
                        .HasColumnName("job_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Params")
                        .HasColumnName("params")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint");

                    b.Property<int>("Times")
                        .HasColumnName("times")
                        .HasColumnType("int");

                    b.HasKey("LogId")
                        .HasName("PK__schedule__9E2397E03AA56FB6");

                    b.HasIndex("JobId")
                        .HasName("job_id");

                    b.ToTable("schedule_job_log");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.SysCaptcha", b =>
                {
                    b.Property<string>("Uuid")
                        .HasColumnName("uuid")
                        .HasColumnType("nvarchar(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnName("expire_time")
                        .HasColumnType("datetime");

                    b.HasKey("Uuid")
                        .HasName("PK__sys_capt__7F427930D52D862F");

                    b.ToTable("sys_captcha");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.SysConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParamKey")
                        .HasColumnName("param_key")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ParamValue")
                        .HasColumnName("param_value")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<byte?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex("ParamKey")
                        .IsUnique()
                        .HasName("UQ__sys_conf__18BAEC9FE5F4F54A")
                        .HasFilter("([param_key] IS NOT null)");

                    b.ToTable("sys_config");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ParamKey = "CLOUD_STORAGE_CONFIG_KEY",
                            ParamValue = "{\"aliyunAccessKeyId\":\"\",\"aliyunAccessKeySecret\":\"\",\"aliyunBucketName\":\"\",\"aliyunDomain\":\"\",\"aliyunEndPoint\":\"\",\"aliyunPrefix\":\"\",\"qcloudBucketName\":\"\",\"qcloudDomain\":\"\",\"qcloudPrefix\":\"\",\"qcloudSecretId\":\"\",\"qcloudSecretKey\":\"\",\"qiniuAccessKey\":\"NrgMfABZxWLo5B - YYSjoE8 - AZ1EISdi1Z3ubLOeZ\",\"qiniuBucketName\":\"ios - app\",\"qiniuDomain\":\"http://7xlij2.com1.z0.glb.clouddn.com\",\"qiniuPrefix\":\"upload\",\"qiniuSecretKey\":\"uIwJHevMRWU0VLxFvgy0tAcOdGqasdtVlJkdy6vV\",\"type\":1}",
                            Remark = "云存储配置信息",
                            Status = (byte)0
                        });
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.SysLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasColumnName("ip")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Method")
                        .HasColumnName("method")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Operation")
                        .HasColumnName("operation")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Params")
                        .HasColumnName("params")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<long>("Time")
                        .HasColumnName("time")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("sys_log");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.SysMenu", b =>
                {
                    b.Property<long>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderNum")
                        .HasColumnName("order_num")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Perms")
                        .HasColumnName("perms")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("Type")
                        .HasColumnName("type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("MenuId")
                        .HasName("PK__sys_menu__4CA0FADCF95CB900");

                    b.ToTable("sys_menu");

                    b.HasData(
                        new
                        {
                            MenuId = 1L,
                            Icon = "system",
                            Name = "系统管理",
                            OrderNum = 0,
                            ParentId = 0L,
                            Type = 0
                        },
                        new
                        {
                            MenuId = 2L,
                            Icon = "admin",
                            Name = "管理员列表",
                            OrderNum = 1,
                            ParentId = 1L,
                            Type = 1,
                            Url = "sys/user"
                        },
                        new
                        {
                            MenuId = 3L,
                            Icon = "role",
                            Name = "角色管理",
                            OrderNum = 2,
                            ParentId = 1L,
                            Type = 1,
                            Url = "sys/role"
                        },
                        new
                        {
                            MenuId = 4L,
                            Icon = "menu",
                            Name = "菜单管理",
                            OrderNum = 3,
                            ParentId = 1L,
                            Type = 1,
                            Url = "sys/menu"
                        },
                        new
                        {
                            MenuId = 5L,
                            Icon = "sql",
                            Name = "SQL监控",
                            OrderNum = 4,
                            ParentId = 1L,
                            Type = 1,
                            Url = "http://localhost:8080/renren-fast/druid/sql.html"
                        },
                        new
                        {
                            MenuId = 6L,
                            Icon = "job",
                            Name = "定时任务",
                            OrderNum = 5,
                            ParentId = 1L,
                            Type = 1,
                            Url = "job/schedule"
                        },
                        new
                        {
                            MenuId = 7L,
                            Name = "查看",
                            OrderNum = 0,
                            ParentId = 6L,
                            Perms = "sys:schedule:list,sys:schedule:info",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 8L,
                            Name = "新增",
                            OrderNum = 0,
                            ParentId = 6L,
                            Perms = "sys:schedule:save",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 9L,
                            Name = "修改",
                            OrderNum = 0,
                            ParentId = 6L,
                            Perms = "sys:schedule:update",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 10L,
                            Name = "删除",
                            OrderNum = 0,
                            ParentId = 6L,
                            Perms = "sys:schedule:delete",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 11L,
                            Name = "暂停",
                            OrderNum = 0,
                            ParentId = 6L,
                            Perms = "sys:schedule:pause",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 12L,
                            Name = "恢复",
                            OrderNum = 0,
                            ParentId = 6L,
                            Perms = "sys:schedule:resume",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 13L,
                            Name = "立即执行",
                            OrderNum = 0,
                            ParentId = 6L,
                            Perms = "sys:schedule:run",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 14L,
                            Name = "日志列表",
                            OrderNum = 0,
                            ParentId = 6L,
                            Perms = "sys:schedule:log",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 15L,
                            Name = "查看",
                            OrderNum = 0,
                            ParentId = 2L,
                            Perms = "sys:user:list,sys:user:info",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 16L,
                            Name = "新增",
                            OrderNum = 0,
                            ParentId = 2L,
                            Perms = "sys:user:save,sys:role:select",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 17L,
                            Name = "修改",
                            OrderNum = 0,
                            ParentId = 2L,
                            Perms = "sys:user:update,sys:role:select",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 18L,
                            Name = "删除",
                            OrderNum = 0,
                            ParentId = 2L,
                            Perms = "sys:user:delete",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 19L,
                            Name = "查看",
                            OrderNum = 0,
                            ParentId = 3L,
                            Perms = "sys:role:list,sys:role:info",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 20L,
                            Name = "新增",
                            OrderNum = 0,
                            ParentId = 3L,
                            Perms = "sys:role:save,sys:menu:list",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 21L,
                            Name = "修改",
                            OrderNum = 0,
                            ParentId = 3L,
                            Perms = "sys:role:update,sys:menu:list",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 22L,
                            Name = "删除",
                            OrderNum = 0,
                            ParentId = 3L,
                            Perms = "sys:role:delete",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 23L,
                            Name = "查看",
                            OrderNum = 0,
                            ParentId = 4L,
                            Perms = "sys:menu:list,sys:menu:info",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 24L,
                            Name = "新增",
                            OrderNum = 0,
                            ParentId = 4L,
                            Perms = "sys:menu:save,sys:menu:select",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 25L,
                            Name = "修改",
                            OrderNum = 0,
                            ParentId = 4L,
                            Perms = "sys:menu:update,sys:menu:select",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 26L,
                            Name = "删除",
                            OrderNum = 0,
                            ParentId = 4L,
                            Perms = "sys:menu:delete",
                            Type = 2
                        },
                        new
                        {
                            MenuId = 27L,
                            Icon = "config",
                            Name = "参数管理",
                            OrderNum = 6,
                            ParentId = 1L,
                            Perms = "sys:config:list,sys:config:info,sys:config:save,sys:config:update,sys:config:delete",
                            Type = 1,
                            Url = "sys/config"
                        },
                        new
                        {
                            MenuId = 29L,
                            Icon = "log",
                            Name = "系统日志",
                            OrderNum = 7,
                            ParentId = 1L,
                            Perms = "sys:log:list",
                            Type = 1,
                            Url = "sys/log"
                        },
                        new
                        {
                            MenuId = 30L,
                            Icon = "oss",
                            Name = "文件上传",
                            OrderNum = 6,
                            ParentId = 1L,
                            Perms = "sys:oss:all",
                            Type = 1,
                            Url = "oss/oss"
                        });
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.SysOss", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("sys_oss");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.SysRole", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("role_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RoleName")
                        .HasColumnName("role_name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("RoleId")
                        .HasName("PK__sys_role__760965CCC85E5C67");

                    b.ToTable("sys_role");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.SysRoleMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("MenuId")
                        .HasColumnName("menu_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("sys_role_menu");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.SysUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Salt")
                        .HasColumnName("salt")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId")
                        .HasName("PK__sys_user__B9BE370FDFCC32AC");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("UQ__sys_user__F3DBC57245BB95AA");

                    b.ToTable("sys_user");

                    b.HasData(
                        new
                        {
                            UserId = "00000000000000000000000000000000",
                            CreateTime = new DateTime(2020, 6, 30, 23, 59, 16, 444, DateTimeKind.Local).AddTicks(6816),
                            CreateUserId = "1",
                            Email = "coolyuwk@live.com",
                            Mobile = "18888888888",
                            Password = "d97e62ea2a6b61a8b957b52a6e39f978fc4aa562103ae04353d3a9f051ea85cf",
                            Salt = "YzcmCZNvbXocrsz9dm8e",
                            Status = (byte)1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.SysUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("sys_user_role");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.SysUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("char(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnName("expire_time")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("datetime");

                    b.HasKey("UserId")
                        .HasName("PK__sys_user__B9BE370FED885F1F");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasName("UQ__sys_user__CA90DA7AB4305286");

                    b.ToTable("sys_user_token");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnName("delete_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnName("delete_user")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logs")
                        .HasColumnName("logs")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Mail")
                        .HasColumnName("mail")
                        .HasColumnType("nvarchar(64)")
                        .HasComment("邮箱")
                        .HasMaxLength(64);

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasColumnType("nvarchar(16)")
                        .HasComment("手机,登陆帐号")
                        .HasMaxLength(16);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("nvarchar(128)")
                        .HasComment("显示用户名")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("app_user");
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzCronTriggers", b =>
                {
                    b.HasOne("RenRen.Fast.Api.Entity.QrtzTriggers", "QrtzTriggers")
                        .WithOne("QrtzCronTriggers")
                        .HasForeignKey("RenRen.Fast.Api.Entity.QrtzCronTriggers", "SchedName", "TriggerName", "TriggerGroup")
                        .HasConstraintName("FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzSimpleTriggers", b =>
                {
                    b.HasOne("RenRen.Fast.Api.Entity.QrtzTriggers", "QrtzTriggers")
                        .WithOne("QrtzSimpleTriggers")
                        .HasForeignKey("RenRen.Fast.Api.Entity.QrtzSimpleTriggers", "SchedName", "TriggerName", "TriggerGroup")
                        .HasConstraintName("FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzSimpropTriggers", b =>
                {
                    b.HasOne("RenRen.Fast.Api.Entity.QrtzTriggers", "QrtzTriggers")
                        .WithOne("QrtzSimpropTriggers")
                        .HasForeignKey("RenRen.Fast.Api.Entity.QrtzSimpropTriggers", "SchedName", "TriggerName", "TriggerGroup")
                        .HasConstraintName("FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RenRen.Fast.Api.Entity.QrtzTriggers", b =>
                {
                    b.HasOne("RenRen.Fast.Api.Entity.QrtzJobDetails", "QrtzJobDetails")
                        .WithMany("QrtzTriggers")
                        .HasForeignKey("SchedName", "JobName", "JobGroup")
                        .HasConstraintName("FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
